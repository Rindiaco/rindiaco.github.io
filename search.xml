<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>websocket 使用笔记</title>
      <link href="/2019/06/01/websocket/"/>
      <url>/2019/06/01/websocket/</url>
      
        <content type="html"><![CDATA[<h3 id="WebSocket-流程"><a href="#WebSocket-流程" class="headerlink" title="WebSocket 流程"></a>WebSocket 流程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">连接--&gt;连接成功</span><br><span class="line">连接--&gt;超时处理</span><br><span class="line">连接--&gt;连接失败重连</span><br><span class="line">连接--&gt;心跳</span><br><span class="line">连接成功--&gt;发送消息</span><br><span class="line">发送消息--&gt;超时处理</span><br><span class="line">发送消息--&gt;失败重发</span><br><span class="line">连接成功--&gt;接收消息</span><br><span class="line">连接成功--&gt;可有可无_登录</span><br></pre></td></tr></table></figure><h3 id="WebSocket-实现"><a href="#WebSocket-实现" class="headerlink" title="WebSocket 实现"></a>WebSocket 实现</h3><p>具体协议的实现由 websocketclient实现，我们只是使用它</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &apos;com.neovisionaries:nv-websocket-client:2.2&apos;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private static final int FRAME_QUEUE_SIZE = 5;</span><br><span class="line">private static final int CONNECT_TIMEOUT = 5000;</span><br><span class="line">private WebSocket webSocket;</span><br><span class="line">private void init()&#123;</span><br><span class="line">     try&#123;</span><br><span class="line">    String configUrl = &quot;ws://xxx.xxx.xxx.xxx:xxxx&quot;;</span><br><span class="line">    webSocket = new WebSocketFactory().createSocket(url,CONNECT_TIMEOUT)//访问链接和超时大小</span><br><span class="line">                .setFrameQueueSize(FRAME_QUEUE_SIZE)//消息存留队列限制</span><br><span class="line">                .setMissingCloseFrameAllowed(false)//是否允许丢失消息</span><br><span class="line">                .addListener(mListener = new WsListener())//添加消息传送监听器</span><br><span class="line">                .connectAsynchronously();//异步连接开始</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重新连接"><a href="#重新连接" class="headerlink" title="重新连接"></a>重新连接</h4><p>使用handler 的定时任务来实现不断的重新连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">private Handler mHandler = new Handler();</span><br><span class="line">private int reconnectCount = 0;//已尝试次数</span><br><span class="line">private long minInterval = 3000; //最短时间间隔</span><br><span class="line">private static final int MAXRECONNESTCOUNT = 3;//最大尝试次数</span><br><span class="line">private long maxInterval = 60000; //最长时间间隔</span><br><span class="line"></span><br><span class="line">private void cancleReconnect()&#123;</span><br><span class="line">    reconnectCount = 0 ;</span><br><span class="line">    mHandler.removeCallbacks(mReconncetTask);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> private void reconnect()&#123;</span><br><span class="line">    if (!isNetConnect())&#123; //判断网络是否联通</span><br><span class="line">        reconnectCount = 0;</span><br><span class="line">        Log.d(TAG,&quot;网络错误&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //TODO  用户是否登录</span><br><span class="line"></span><br><span class="line">    if (webSocket==null || !webSocket.isOpen() || getStatus()== WsStatus.CONNECT_SUCCESS)&#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    reconnectCount ++;</span><br><span class="line">    setStatus(WsStatus.CONNCETING);//设置连接状态</span><br><span class="line">    cancleHeartbeat();//取消心跳</span><br><span class="line"></span><br><span class="line">    long reconnectTime = minInterval;</span><br><span class="line">    if (reconnectCount &gt; MAXRECONNESTCOUNT)&#123;</span><br><span class="line">        url = DEF_URL;</span><br><span class="line">        // 这里可以在多次尝试未成功之后，使用其他的连接方式例如http连接</span><br><span class="line">        long temp = minInterval * (reconnectCount - 2);</span><br><span class="line">        reconnectTime = temp &gt; maxInterval ? maxInterval : temp;</span><br><span class="line">    &#125;</span><br><span class="line">    Log.d(TAG,&quot;准备开始第&quot;+reconnectCount+&quot;次重连,重连间隔&quot;+reconnectTime+&quot;-- url : &quot;+url);</span><br><span class="line">    mHandler.postDelayed(mReconncetTask,reconnectTime);</span><br><span class="line">&#125;</span><br><span class="line">//重新连接任务</span><br><span class="line">private Runnable mReconncetTask = new Runnable() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            webSocket = new WebSocketFactory().createSocket(url,CONNECT_TIMEOUT)</span><br><span class="line">                    .setFrameQueueSize(FRAME_QUEUE_SIZE)</span><br><span class="line">                    .setMissingCloseFrameAllowed(false)</span><br><span class="line">                    .addListener(mListener = new WsListener())</span><br><span class="line">                    .connectAsynchronously();</span><br><span class="line">        &#125;catch (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="消息响应-接收消息"><a href="#消息响应-接收消息" class="headerlink" title="消息响应,接收消息"></a>消息响应,接收消息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">//监听器需要 继承webSocketAdapter 然后再设置给WebSocket</span><br><span class="line">class WsListener extends WebSocketAdapter&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onTextMessage(WebSocket websocket, String text) throws Exception &#123;</span><br><span class="line">            super.onTextMessage(websocket, text);</span><br><span class="line">            Log.d(TAG,&quot;收到信息:&quot;+text);</span><br><span class="line">            Response response = Codec.decode(text);</span><br><span class="line">            if (response.getRespEvent() == NetCodeUtil.RECIVER_CALLBACK)&#123;</span><br><span class="line">                CallbackWrapper wrapper = callbackWrapperMap.remove(Long.parseLong(response.getSeqId()));</span><br><span class="line">                if (wrapper == null)&#123;</span><br><span class="line">                    Log.d(TAG,&quot;没有找到对应的回调&quot;);</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                try &#123;</span><br><span class="line">                    wrapper.getTimoutTask().cancel(true);</span><br><span class="line">                    ChildResponse childResponse = Codec.decodeChildResp(response.getResp());</span><br><span class="line">                    if (childResponse.isOK())&#123;</span><br><span class="line">                        Object o = new Gson().fromJson(childResponse.getData(),</span><br><span class="line">                                wrapper.getAction().getRespClazz());</span><br><span class="line">                        wrapper.getTempCallback().onSuccess(o);</span><br><span class="line">                    &#125;else &#123;</span><br><span class="line">                        wrapper.getTempCallback()</span><br><span class="line">                                .onError(ErrorCode.BUSINIESS_EXCEPTION.getMsg(),</span><br><span class="line">                                        wrapper.getRequest());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;catch (JsonSyntaxException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    wrapper.getTempCallback()</span><br><span class="line">                            .onError(ErrorCode.PARSE_ECEPTION.getMsg(),</span><br><span class="line">                                    wrapper.getRequest());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else if (response.getRespEvent() == NetCodeUtil.SERVER_NOTICE)&#123;</span><br><span class="line">//                消息通知</span><br><span class="line">                NotifyListenerManager.getInstence().fire(response);</span><br><span class="line">            &#125;else if (response.getRespEvent() == NetCodeUtil.CHAT)&#123;</span><br><span class="line">                String resp = response.getResp();</span><br><span class="line">                if (TextUtils.isEmpty(resp)) &#123;</span><br><span class="line">                    Log.d(TAG,&quot;消息为空&quot;);</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                Message message = Codec.decodeResp(resp);</span><br><span class="line">                if (onReciveMessage!=null)&#123;</span><br><span class="line">                    onReciveMessage.onMessage(message);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onBinaryMessage(WebSocket websocket, byte[] binary) throws Exception &#123;</span><br><span class="line">            super.onBinaryMessage(websocket, binary);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onConnected(WebSocket websocket, Map&lt;String, List&lt;String&gt;&gt; headers) throws Exception &#123;</span><br><span class="line">            super.onConnected(websocket, headers);</span><br><span class="line">            Log.d(TAG,&quot;连接成功&quot;);</span><br><span class="line">            setStatus(WsStatus.CONNECT_SUCCESS);</span><br><span class="line">            cancleReconnect();</span><br><span class="line">            doAuth();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onConnectError(WebSocket websocket, WebSocketException exception) throws Exception &#123;</span><br><span class="line">            super.onConnectError(websocket, exception);</span><br><span class="line">            Log.d(TAG,&quot;连接错误:&quot;);</span><br><span class="line">            setStatus(WsStatus.CONNCET_FAIL);</span><br><span class="line">            reconnect();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onDisconnected(WebSocket websocket, WebSocketFrame serverCloseFrame, WebSocketFrame clientCloseFrame, boolean closedByServer) throws Exception &#123;</span><br><span class="line">            super.onDisconnected(websocket, serverCloseFrame, clientCloseFrame, closedByServer);</span><br><span class="line">            Log.d(TAG,&quot;连接断开&quot;);</span><br><span class="line">            setStatus(WsStatus.CONNCET_FAIL);</span><br><span class="line">            reconnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">private static final int REQUEST_TIMEOUT = 10000;</span><br><span class="line">private AtomicLong seqId = new AtomicLong(SystemClock.uptimeMillis());</span><br><span class="line">public void sendReq(Action action, Object req, String cid, ICallback callback)&#123;</span><br><span class="line">    sendReq(action,req,cid,callback,REQUEST_TIMEOUT);</span><br><span class="line">&#125;</span><br><span class="line">public void sendReq(Action action, Object req, String cid, ICallback callback, int timeout)&#123;</span><br><span class="line">    sendReq(action,req,cid,callback,timeout,1);</span><br><span class="line">&#125;</span><br><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">private &lt;T&gt; void sendReq(Action action, final T req, String cid, final ICallback callback, final long timeout, int reqCount)&#123;</span><br><span class="line">    if (!isNetConnect())&#123;</span><br><span class="line">        callback.onFail(&quot;网络不可用&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    Request request = new Request.Builder&lt;T&gt;()</span><br><span class="line">            .action(action.getAction())</span><br><span class="line">            .reqEvent(action.getReqEvent())</span><br><span class="line">            .seqId(seqId.getAndIncrement())</span><br><span class="line">            .reCount(reqCount)</span><br><span class="line">            .req(req)</span><br><span class="line">            .cid(cid)</span><br><span class="line">            .build();</span><br><span class="line">    //回调消息的发送结果</span><br><span class="line">    IWsCallback temp = new IWsCallback() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onSuccess(Object o) &#123;</span><br><span class="line">            sendHandler.obtainMessage(SUCCESS_HANDLE,new CallbackDataWrapper(callback,o))</span><br><span class="line">                    .sendToTarget();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onError(String msg, Request request) &#123;</span><br><span class="line">            sendHandler.obtainMessage(ERROR_HANDLE,new CallbackDataWrapper(callback,msg))</span><br><span class="line">                    .sendToTarget();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onTimeout(Request request, Action action) &#123;</span><br><span class="line">            timeoutHandle(request,action,callback,timeout);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    ScheduledFuture timoutTask = enqueueTimout(request.getSeqId(),timeout);</span><br><span class="line">    callbackWrapperMap.put(request.getSeqId(),</span><br><span class="line">            new CallbackWrapper(temp,timoutTask,action,request));</span><br><span class="line">    //发送消息</span><br><span class="line">    webSocket.sendText(new Gson().toJson(request));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="心跳保活"><a href="#心跳保活" class="headerlink" title="心跳保活"></a>心跳保活</h4><p>连接保活的原理就是不停的向服务器发送一个空的消息保证连接的连通</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">private static final long HEARTBEAT_INTERVAL = 30000;</span><br><span class="line">private int heartbeatFailCount = 0;</span><br><span class="line">private void doAuth()&#123;</span><br><span class="line">    sendReq(Action.LOGIN, null, null,new ICallback() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onSucess(Object o) &#123;</span><br><span class="line">            setStatus(WsStatus.AUTH_SUCCESS);</span><br><span class="line">            startHeartbeat();</span><br><span class="line">            delaySyncData();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onFail(String msg) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void startHeartbeat()&#123;</span><br><span class="line">    mHandler.postDelayed(heartbeatTask,HEARTBEAT_INTERVAL);</span><br><span class="line">&#125;</span><br><span class="line">private void cancleHeartbeat()&#123;</span><br><span class="line">    heartbeatFailCount= 0;</span><br><span class="line">    mHandler.removeCallbacks(heartbeatTask);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private Runnable heartbeatTask = new Runnable() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        sendReq(Action.HEARTBEAT, null, null,new ICallback() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onSucess(Object o) &#123;</span><br><span class="line">                heartbeatFailCount = 0;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onFail(String msg) &#123;</span><br><span class="line">                heartbeatFailCount ++;</span><br><span class="line">                if (heartbeatFailCount &gt;= 3)&#123;</span><br><span class="line">                    reconnect();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        mHandler.postDelayed(this,HEARTBEAT_INTERVAL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="超时处理"><a href="#超时处理" class="headerlink" title="超时处理"></a>超时处理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">private final int SUCCESS_HANDLE = 0x01;</span><br><span class="line">private final int ERROR_HANDLE = 0x02;</span><br><span class="line"></span><br><span class="line">private Handler sendHandler = new Handler(Looper.getMainLooper())&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void handleMessage(android.os.Message msg) &#123;</span><br><span class="line">        switch (msg.what)&#123;</span><br><span class="line">            case SUCCESS_HANDLE :</span><br><span class="line">                CallbackDataWrapper sucessWrapper = (CallbackDataWrapper) msg.obj;</span><br><span class="line">                sucessWrapper.getCallback().onSucess(sucessWrapper.getData());</span><br><span class="line">                break;</span><br><span class="line">            case ERROR_HANDLE:</span><br><span class="line">                CallbackDataWrapper errorWrapper = (CallbackDataWrapper) msg.obj;</span><br><span class="line">                errorWrapper.getCallback().onFail(errorWrapper.getData().toString());</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">private void timeoutHandle(Request request,Action action,ICallback callback,long timout)&#123;</span><br><span class="line">    if (request.getReqCount() &gt; 3)&#123;</span><br><span class="line">        Log.d(TAG,&quot;超过3次连接超时&quot;);</span><br><span class="line">        //TODO 走http请求</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        sendReq(action,request.getReq(),null,callback,timout,request.getReqCount());</span><br><span class="line">        request.setReqCount(request.getReqCount() + 1);</span><br><span class="line">        Log.d(TAG,&quot;第&quot;+request.getReqCount()+&quot;次发起&quot;+action.getAction());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">private ScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor();</span><br><span class="line">private Map&lt;Long,CallbackWrapper&gt; callbackWrapperMap = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">private ScheduledFuture enqueueTimout(final long seqId, long timeout)&#123;</span><br><span class="line">    return executorService.schedule(new Runnable() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            CallbackWrapper wrapper = callbackWrapperMap.remove(seqId);</span><br><span class="line">            if (wrapper != null)&#123;</span><br><span class="line">               wrapper.getTempCallback().onTimeout(wrapper.getRequest(),wrapper.getAction());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,timeout,TimeUnit.MILLISECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他包装类"><a href="#其他包装类" class="headerlink" title="其他包装类"></a>其他包装类</h4><p><em>回调包装类</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class CallbackWrapper &#123;</span><br><span class="line">    private final IWsCallback tempCallback;</span><br><span class="line">    private final ScheduledFuture timoutTask;</span><br><span class="line">    private final Action action;</span><br><span class="line">    private final Request request;</span><br><span class="line"></span><br><span class="line">    public CallbackWrapper(IWsCallback tempCallback, ScheduledFuture timoutTask, Action action, Request request) &#123;</span><br><span class="line">        this.tempCallback = tempCallback;</span><br><span class="line">        this.timoutTask = timoutTask;</span><br><span class="line">        this.action = action;</span><br><span class="line">        this.request = request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public IWsCallback getTempCallback() &#123;</span><br><span class="line">        return tempCallback;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ScheduledFuture getTimoutTask() &#123;</span><br><span class="line">        return timoutTask;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Action getAction() &#123;</span><br><span class="line">        return action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Request getRequest() &#123;</span><br><span class="line">        return request;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>回调数据包装类</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class CallbackDataWrapper&lt;T&gt; &#123;</span><br><span class="line">    private ICallback&lt;T&gt; callback;</span><br><span class="line">    private Object data;</span><br><span class="line"></span><br><span class="line">    public CallbackDataWrapper(ICallback&lt;T&gt; callback, Object data) &#123;</span><br><span class="line">        this.callback = callback;</span><br><span class="line">        this.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ICallback&lt;T&gt; getCallback() &#123;</span><br><span class="line">        return callback;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCallback(ICallback&lt;T&gt; callback) &#123;</span><br><span class="line">        this.callback = callback;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Object getData() &#123;</span><br><span class="line">        return data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setData(Object data) &#123;</span><br><span class="line">        this.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>回调通知类</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">public class NotifyListenerManager &#123;</span><br><span class="line"></span><br><span class="line">    private final String TAG = this.getClass().getName();</span><br><span class="line"></span><br><span class="line">    private volatile static NotifyListenerManager manager;</span><br><span class="line"></span><br><span class="line">    private Map&lt;String,INotifyListener&gt; map = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    private NotifyListenerManager()&#123;</span><br><span class="line">        regist();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static NotifyListenerManager getInstence()&#123;</span><br><span class="line">        if (manager == null)&#123;</span><br><span class="line">            synchronized (NotifyListenerManager.class)&#123;</span><br><span class="line">                if (manager == null)&#123;</span><br><span class="line">                    manager = new NotifyListenerManager();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return manager;</span><br><span class="line">    &#125;</span><br><span class="line">    private void regist()&#123;</span><br><span class="line">        map.put(&quot;notifyAnnounceMsg&quot;, new AnnounceMsgListener());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void fire(Response response)&#123;</span><br><span class="line">        String action = response.getAction();</span><br><span class="line">        String resp = response.getResp();</span><br><span class="line">        INotifyListener listener = map.get(action);</span><br><span class="line">        if (listener!=null)&#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        NotifyClass notifyClass = listener.getClass().getAnnotation(NotifyClass.class);</span><br><span class="line">        Class&lt;?&gt; clazz = notifyClass.value();</span><br><span class="line">        Object result = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            result = new Gson().fromJson(resp,clazz);</span><br><span class="line">        &#125;catch (JsonSyntaxException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        listener.fire(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public interface INotifyListener&lt;T&gt;&#123;</span><br><span class="line">        void fire(T t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 自定义一个注解 注解的作用是返回 class 对象</span><br><span class="line">     * 写这个的原因是实现一个观察者模式</span><br><span class="line">      */</span><br><span class="line"></span><br><span class="line">    @Target(ElementType.TYPE)</span><br><span class="line">    @Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">    @Documented</span><br><span class="line">    public @interface NotifyClass&#123;</span><br><span class="line">        Class&lt;?&gt; value();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @NotifyClass(AnnounceMsgNotify.class)</span><br><span class="line">    public class AnnounceMsgListener implements INotifyListener&lt;AnnounceMsgListener&gt;&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void fire(AnnounceMsgListener announceMsgListener) &#123;</span><br><span class="line">//            在此处处理事务</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class AnnounceMsgNotify&#123;</span><br><span class="line">        @SerializedName(&quot;msg_version&quot;)</span><br><span class="line">        private String msgVersion;</span><br><span class="line"></span><br><span class="line">        public String getMsgVersion() &#123;</span><br><span class="line">            return msgVersion;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setMsgVersion(String msgVersion) &#123;</span><br><span class="line">            this.msgVersion = msgVersion;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其余的request-，response-，childResponse不重要可以自己商定这里只写代码的大概"><a href="#其余的request-，response-，childResponse不重要可以自己商定这里只写代码的大概" class="headerlink" title="其余的request ，response ，childResponse不重要可以自己商定这里只写代码的大概"></a>其余的request ，response ，childResponse不重要可以自己商定这里只写代码的大概</h4>]]></content>
      
      
      
        <tags>
            
            <tag> webSocket android </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
